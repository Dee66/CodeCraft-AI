# --- Stage 1: Production Dependency Builder ---
# Builds a lean virtual environment with only production dependencies.
FROM python:3.11 AS prod_builder

WORKDIR /app

# Patch OS packages before installing Python deps (security best practice)
RUN apt-get update && apt-get upgrade -y && apt-get clean && rm -rf /var/lib/apt/lists/*

COPY pyproject.toml poetry.lock ./
RUN pip install --upgrade pip setuptools wheel && \
    pip install --upgrade poetry && \
    poetry cache clear . --all || true && \
    for i in 1 2 3; do poetry install --only main --no-root && break || sleep 10; done


# --- Stage 2: Development & Test Dependency Builder ---
# Builds on the production environment, adding development dependencies.
FROM prod_builder AS dev_builder

COPY pyproject.toml poetry.lock ./
RUN pip install --upgrade pip setuptools wheel && \
    pip install --upgrade poetry && \
    poetry cache clear . --all || true && \
    for i in 1 2 3; do poetry install --with dev --no-root && break || sleep 10; done


# --- Stage 3: Tester ---
# Uses the full development environment to run the test suite.
FROM dev_builder AS tester

WORKDIR /app

COPY src ./src
COPY tests ./tests
COPY config ./config
COPY data/dev ./data/dev
COPY pytest.ini .

RUN poetry run pytest


# --- Stage 4: Final Production Image ---
# Creates the final, lean, and secure image using a distroless base.
# Distroless images contain only the application and its runtime dependencies.
FROM gcr.io/distroless/python3-debian11

WORKDIR /app
ENV PATH="/opt/venv/bin:$PATH"
ENV PROJECT_ROOT="/app"

COPY --from=prod_builder /usr/local /usr/local

COPY --chown=65532:65532 src ./src
COPY --chown=65532:65532 config ./config

CMD ["python", "src/main.py"]
