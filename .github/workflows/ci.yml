name: CodeCraft AI - CI/CD

on:
  # Trigger on pushes to the main branch for production deployments
  push:
    branches: [ "main" ]

  # Allow manual triggers for any branch, primarily for staging deployments
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - prod

env:
  AWS_REGION: af-south-1
  API_ECR_REPOSITORY: codecraft-ai-api
  INGESTION_ECR_REPOSITORY: codecraft-ai-ingestion
  # Set CDK_ENV based on the trigger event
  CDK_ENV: ${{ (github.event_name == 'push' && 'prod') || github.event.inputs.environment }}

permissions:
  contents: read
  id-token: write # passwordless auth to AWS

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make install

      - name: Run linter
        run: make lint

      - name: Run tests
        run: make test

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: lint-and-test
    # This job should run for pushes to main OR any manual workflow dispatch.
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsCdkDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Build, tag, and push API image
        run: |
          docker build -f Dockerfile.api -t ${{ steps.login-ecr.outputs.registry }}/${{ env.API_ECR_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.API_ECR_REPOSITORY }}:${{ github.sha }}

      - name: Build, tag, and push Ingestion image
        run: |
          docker build -f Dockerfile.ingestion -t ${{ steps.login-ecr.outputs.registry }}/${{ env.INGESTION_ECR_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.INGESTION_ECR_REPOSITORY }}:${{ github.sha }}

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build-and-push
    # This job should run for pushes to main OR any manual workflow dispatch.
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsCdkDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK dependencies
        run: make infra-install

      - name: Deploy CDK stack
        run: make cdk-deploy CDK_ENV=${{ env.CDK_ENV }}

      - name: Force new ECS deployment
        id: ecs_deploy
        run: |
          # Robustly find the stateless stack key in the JSON output
          STACK_NAME=$(jq -r 'keys[] | select(contains("StatelessStack"))' cdk-outputs.json)
          CLUSTER_NAME=$(jq -r --arg stack_name "$STACK_NAME" '.[$stack_name].EcsClusterName' cdk-outputs.json)
          SERVICE_NAME=$(jq -r --arg stack_name "$STACK_NAME" '.[$stack_name].ApiServiceName' cdk-outputs.json)

          echo "Forcing new deployment for service $SERVICE_NAME in cluster $CLUSTER_NAME..."
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
